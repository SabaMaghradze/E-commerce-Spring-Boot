The project implements three-layer architecture, which is a common design pattern used to
organise code into three main layer.

In case of category for example: Repository, Service and Controller(model).

Doubt 1: the functionality of saveCategory in admin controller.
in the controller, we autowire an instance of CategoryService, not CategoryServiceImpl. This can seem a bit
confusing at first, but here’s what’s happening behind the scenes in Spring Boot:

@Autowired
private CategoryService categoryService;

This tells Spring to inject (or "autowire") a CategoryService object into the controller. However,
CategoryService is an interface, so Spring needs to find a concrete implementation of this interface
to inject.

Spring uses component scanning to detect beans in the application context. When Spring starts up, it
looks for classes annotated with stereotypes like @Service, @Component, @Repository, and @Controller.
When it finds these, it creates an instance (bean) of each of them and manages them in the application
context.
In this case, CategoryServiceImpl is annotated with @Service, so Spring knows that it’s the concrete
implementation for CategoryService.

When you autowire CategoryService in the controller, Spring:

Checks the application context for a bean that matches the CategoryService type.
Finds that CategoryServiceImpl is the only class that implements CategoryService and is marked as
a Spring-managed bean (with @Service). Automatically injects an instance of CategoryServiceImpl
wherever CategoryService is autowired.
So, even though CategoryService is the type you're autowiring, Spring injects CategoryServiceImpl

--------------------------------------------------------------------------------------------------
RequestParam, Multipartfile:

@RequestParam is a Spring annotation used to extract query parameters, form data, or URL parameters from an
HTTP request and bind them to method parameters in your controller.
In this case, @RequestParam("file") binds the file that the user uploads in the form to the file
parameter in the controller method.
The "file" in parentheses refers to the name of the form field for the file upload, so Spring knows
where to find the data in the incoming HTTP request.
in our case it comes from the category.html:
<label>Upload Image</label> <input type="file" class="form-control" name="file">

MultipartFile is a Spring class that represents an uploaded file received as part of an HTTP multipart
request (usually through a form submission).
It provides methods to access the file’s content and metadata, such as:
file.getOriginalFilename(): Returns the original filename of the uploaded file.
file.getBytes(): Returns the content of the file as an array of bytes.
file.transferTo(...): Allows you to save the file to a specific location on your server.
Using MultipartFile in Spring is convenient for handling file uploads without needing to parse the
file data manually.

--------------------------------------------------------------------------------------------------

Redirect statement in saveCategory.

The return "redirect:/category"; statement in your @PostMapping method is a redirect directive in
Spring MVC. It tells Spring to send an HTTP redirect to the client’s browser instead of rendering
a view directly. Let’s go over why and how it works.

in web applications, it’s a common practice to redirect after a successful form submission (often
called the Post/Redirect/Get pattern). Without a redirect, if the user refreshed the page after a
form submission, the browser would resubmit the form, potentially causing duplicate submissions.
By using a redirect, we ensure that the user is sent to a new page (in this case, /category), and if
they refresh, they’ll only reload the target page, not resubmit the form.

-----------------------------------------------------------------------------------------------------

th block in category.html, CommonService interface and CommonServiceImpl class.

removeSessionMessage method is designed to remove session attributes, specifically succMsg and
errorMsg, which hold messages for successful and unsuccessful operations. By removing these messages
after displaying them, the service ensures that messages don’t persist across different pages or
actions unintentionally.

When a message (success or error) is set in the session, the Thymeleaf template displays it on the
page if it matches the th:if condition.
Once the message is displayed, th:text="${@commonServiceImpl.removeSessionMessage()}" immediately
calls removeSessionMessage, which removes succMsg or errorMsg from the session.
As a result, these messages are cleared after they are displayed once, preventing them from
reappearing on subsequent page loads or redirects AFTER refreshing.

n Thymeleaf, when referencing Spring beans in expressions (like @commonServiceImpl in your example),
the class name is often written in lowercase because Spring, by default, registers beans with names
derived from the class name, starting with a lowercase letter. This naming convention aligns with
Java’s typical variable naming practices.

In Spring, when a class annotated with @Service, @Component, @Repository, or @Controller is
automatically registered as a bean, the bean name defaults to the class name with the first

letter in lowercase.

------------------------------------------------------------------------------------------------------

Try-Catch block in saveCategory method.

ClassPathResource is used to find resources located in the classpath, like files within
src/main/resources.

Explanation: Here, new ClassPathResource("static/img") points to the src/main/resources/static/img
directory (assuming that’s where you want to save images).

Result: The .getFile() method retrieves the actual file or directory from the classpath. In this
case, saveFile becomes a File object that points to the static/img folder.

Path path = Paths.get(saveFile.getAbsolutePath() + File.separator + "category_img" + File.separator +
file.getOriginalFilename());

Purpose: To create a file path to save the uploaded image.
Explanation:
saveFile.getAbsolutePath() gives the full path to the static/img folder.
File.separator is the system’s file separator (like / on Unix and \ on Windows).
"category_img" is a folder name that will be added as a subdirectory in static/img.
file.getOriginalFilename() gets the uploaded file’s original name, so this line ultimately creates
a path to where the file should be saved.
Result: The path object represents the complete path for saving the image
(e.g., static/img/category_img/yourImage.jpg).

Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);

Purpose: This line actually saves the uploaded file to the path created above.
Explanation:
file.getInputStream() retrieves the file data from the uploaded file.
Files.copy() copies this data to the specified path.
StandardCopyOption.REPLACE_EXISTING ensures that if a file with the same name already exists, it
will be overwritten. Result: The uploaded file is saved in the static/img/category_img directory.