The purpose of base.html is to serve as a common layout or “base” template that other pages
can inherit. Here’s the breakdown of its content:

th:fragment="Layout(content)": This is a fragment definition. Layout is the name of the fragment,
and it accepts a content parameter, which will later hold the specific content of pages that
use this layout.

<h1>Navbar</h1>: This displays "Navbar" as a heading, simulating a navigation bar.
<div th:replace="${content}"></div>: This div is a placeholder for custom content.
The content variable will be dynamically replaced with content from other pages, such as
login.html, that specify this layout.

The login.html file is intended to use base.html as its layout. Here’s how it works:

th:replace="base::Layout(~{::section})": This line is crucial. The th:replace attribute tells
Thymeleaf to replace the entire login.html content with the Layout fragment from base.html.
It also passes the content of login.html (everything inside <section> and <h1>Demo page</h1>)
into the content placeholder in base.html. Content passed to base.html: When login.html is
rendered, the <section> and <h1>Demo page</h1> elements are treated as the content and are
inserted where ${content} is referenced in base.html.

